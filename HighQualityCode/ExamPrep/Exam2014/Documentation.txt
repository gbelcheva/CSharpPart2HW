Design pattern: Simple Factory
	* 

Design pattern: Strategy
	* 

Design pattern: Template Method
	* 

Design pattern: Abstract factory
	* 

Design pattern: Composite
	* 

Design pattern: Mediator
	* 

Found bottlenecks:
	* 
	* 

Found bugs:
	* 
	* 
	* 

Single responsibility principle
	* SomeClass is doing exactly one job and has exactly one reason to change.

Open/closed principle
	* open for extension, closed for modification.
	* new implementations can be added and are interchangeable with the old ones without modifying the existing code.

Liskov substitution principle
	* all inheritants are interchangeable with their parents.

Interface segregation principle
	* all interfaces are small, clear and have a single purpose. 

Dependency inversion principle
	* SomeClass accepts an abstract interface and so it doesn't depend on a specific implementation.
	* all dependencies of SomeClass are passed by the classes that use it
